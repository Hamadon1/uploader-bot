from flask import Flask, request import telebot import random import time import threading import json import os from datetime import datetime

BOT_TOKEN = "7574268255:AAH6pOhS_-SamVqmieHMrh6JV3AV5SjWR1s" ADMIN_ID = 6862331593

bot = telebot.TeleBot(BOT_TOKEN, threaded=False) app = Flask(name)

class BotData:
    def __init__(self):
        self.files_db = {}
        self.multi_files = {}
        self.user_states = {}
        self.temp_multi_files = {}
        self.statistics = {
            'total_downloads': 0,
            'active_files': 0,
            'total_users': set()
        }
        self.channels = []
        self.time_limit = 30
        self.welcome_text = """üëã –°–∞–ª–æ–º –∞–∑–∏–∑!
üî• –ë–∞ –±–æ—Ç–∏ —Ä–∞—Å–º–∏–∏ –º–æ —Ö—É—à –æ–º–∞–¥–µ–¥
üì• –ë–∞—Ä–æ–∏ –¥–∞—Ä—ë—Ñ—Ç–∏ —Ñ–∞–π–ª —Ä–∞–º–∑–∏ 4-—Ä–∞“õ–∞–º–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥
‚ö†Ô∏è “ö–æ–∏–¥–∞“≥–æ:
- –ê–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥
- –ë–∞—ä–¥ –∞–∑ —Ç–∞—Ñ—Ç–∏—à–∏ –æ–±—É–Ω–∞ —Ä–∞–º–∑—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥
- –§–∞–π–ª –±–∞—ä–¥ –∞–∑ –º—É–¥–¥–∞—Ç–∏ –º—É–∞–π—è–Ω –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–¥"""
        self.load_data()

    def load_data(self):
        if not os.path.exists('data'):
            os.makedirs('data')
        try:
            if os.path.exists('data/bot_data.json'):
                with open('data/bot_data.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.channels = data.get('channels', [])
                    self.time_limit = data.get('time_limit', 30)
                    self.welcome_text = data.get('welcome_text', self.welcome_text)
        except:
            pass
        self.save_data()

    def save_data(self):
        data = {
            'channels': self.channels,
            'time_limit': self.time_limit,
            'welcome_text': self.welcome_text
        }
        with open('data/bot_data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

bot_data = BotData()

def show_admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üì§ –ò–ª–æ–≤–∞–∏ –ø–æ—Å—Ç", "‚è± –¢–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç",
        "üõ†Ô∏è –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ", "üìÅ –¢–æ–ø 10 —Ñ–∞–π–ª",
        "üìä –û–º–æ—Ä", "‚úèÔ∏è –ú–∞—Ç–Ω–∏ —Å–∞–ª–æ–º",
        "üíæ –ù—É—Å—Ö–∞–≥–∏—Ä”£", "‚ùå –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω",
        "üóëÔ∏è –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞–π–ª", "üì¢ –ü–∞—ë–º –±–∞ “≥–∞–º–∞"
    ]
    markup.add(*[types.KeyboardButton(button) for button in buttons])
    bot.send_message(
        message.chat.id,
        "*üéõ –ü–∞–Ω–µ–ª–∏ –∏–¥–æ—Ä–∞–∫—É–Ω”£*\n\n–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        parse_mode='Markdown',
        reply_markup=markup
    )

def show_finish_button(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ê–Ω“∑–æ–º ‚úÖ"))
    bot.send_message(
        message.chat.id,
        "–§–∞–π–ª“≥–æ—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ –≤–∞ –±–∞—ä–¥ —Ç—É–≥–º–∞–∏ '–ê–Ω“∑–æ–º ‚úÖ'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥:",
        reply_markup=markup
    )

def check_subscription(user_id):
    if not bot_data.channels:
        return True
    for channel in bot_data.channels:
        try:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked', 'restricted']:
                return False
        except:
            continue
    return True

def check_admin_subscription(message):
    not_subscribed = []
    for channel in bot_data.channels:
        try:
            member = bot.get_chat_member(channel, message.from_user.id)
            if member.status in ['left', 'kicked', 'restricted']:
                not_subscribed.append(channel)
        except:
            continue
    
    if not_subscribed:
        channels_text = "\n".join([f"‚Ä¢ {channel}" for channel in not_subscribed])
        bot.reply_to(
            message,
            f"‚ö†Ô∏è –®—É–º–æ –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –∑–µ—Ä–∏–Ω –æ–±—É–Ω–∞ –Ω–µ—Å—Ç–µ–¥:\n{channels_text}\n\n–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!"
        )
        return False
    return True

def show_channels_keyboard(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for channel in bot_data.channels:
        markup.add(
            types.InlineKeyboardButton(
                f"üì¢ –û–±—É–Ω–∞ —à—É–¥–∞–Ω –±–∞ {channel}",
                url=f"https://t.me/{channel[1:]}"
            )
        )
    markup.add(types.InlineKeyboardButton("üîÑ –¢–∞—Ñ—Ç–∏—à", callback_data="check_sub"))
    bot.send_message(
        chat_id,
        "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç, –ª—É—Ç—Ñ–∞–Ω –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –∑–µ—Ä–∏–Ω –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:",
        reply_markup=markup
    )

@bot.message_handler(commands=['start', 'panel'])
def start_command(message):
    user_id = message.from_user.id
    bot_data.statistics['total_users'].add(user_id)
    
    if user_id == ADMIN_ID:
        if check_admin_subscription(message):
            show_admin_panel(message)
    else:
        # –°–∞–Ω“∑–∏–¥–∞–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä“≥–æ–∏ /start –±–∞—Ä–æ–∏ “õ—É–ª—Ñ ID
        command_args = message.text.split()
        if len(command_args) > 1 and command_args[1].startswith('file_'):
            file_key = command_args[1].replace('file_', '')
            if file_key in bot_data.files_db or file_key in bot_data.multi_files:
                if not check_subscription(user_id):
                    show_channels_keyboard(message.chat.id)
                    bot_data.user_states[user_id] = f'waiting_sub_for_file_{file_key}'
                else:
                    send_file_with_timer(message.chat.id, file_key)
            else:
                bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —ë—Ñ—Ç –Ω–∞—à—É–¥ —ë –∞–ª–ª–∞–∫–∞–π –Ω–µ—Å—Ç —à—É–¥–∞–∞—Å—Ç!")
        else:
            if not check_subscription(user_id):
                show_channels_keyboard(message.chat.id)
            else:
                bot.send_message(
                    message.chat.id,
                    bot_data.welcome_text,
                    parse_mode='Markdown'
                )

def delete_file_after_timeout(chat_id, message_id, timeout):
    time.sleep(timeout)
    try:
        bot.delete_message(chat_id, message_id)
    except:
        pass

def send_file_with_timer(chat_id, file_key):
    if file_key in bot_data.files_db:
        file_info = bot_data.files_db[file_key]
        sent = send_file(chat_id, file_info)
        if sent:
            bot.send_message(
                chat_id, 
                f"‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –ò–Ω —Ñ–∞–π–ª –±–∞—ä–¥–∏ {bot_data.time_limit} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–¥. –ê–≥–∞—Ä –ª–æ–∑–∏–º –±–æ—à–∞–¥, –æ–Ω—Ä–æ –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥!"
            )
        bot_data.statistics['total_downloads'] += 1
    elif file_key in bot_data.multi_files:
        files = bot_data.multi_files[file_key]
        for file_info in files:
            send_file(chat_id, file_info)
        bot.send_message(
            chat_id, 
            f"‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –ò–Ω —Ñ–∞–π–ª“≥–æ –±–∞—ä–¥–∏ {bot_data.time_limit} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–Ω–¥. –ê–≥–∞—Ä –ª–æ–∑–∏–º –±–æ—à–∞–¥, –æ–Ω“≥–æ—Ä–æ –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥!"
        )
        bot_data.statistics['total_downloads'] += len(files)

def send_file(chat_id, file_info):
    file_id = file_info['file_id']
    file_type = file_info['type']
    caption = file_info.get('caption', '')
    
    try:
        if file_type == 'photo':
            sent = bot.send_photo(chat_id, file_id, caption=caption)
        elif file_type == 'video':
            sent = bot.send_video(chat_id, file_id, caption=caption)
        elif file_type == 'audio':
            sent = bot.send_audio(chat_id, file_id, caption=caption)
        elif file_type == 'voice':
            sent = bot.send_voice(chat_id, file_id, caption=caption)
        elif file_type == 'document':
            sent = bot.send_document(chat_id, file_id, caption=caption)
            
        threading.Thread(
            target=delete_file_after_timeout,
            args=(chat_id, sent.message_id, bot_data.time_limit)
        ).start()
            
        return sent
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞–π–ª: {str(e)}")
        return None

def get_file_id(message):
    if message.content_type == 'photo':
        return message.photo[-1].file_id
    elif message.content_type == 'video':
        return message.video.file_id
    elif message.content_type == 'audio':
        return message.audio.file_id
    elif message.content_type == 'voice':
        return message.voice.file_id
    elif message.content_type == 'document':
        return message.document.file_id

@bot.message_handler(content_types=['photo', 'video', 'audio', 'voice', 'document'])
def handle_files(message):
    if message.from_user.id != ADMIN_ID:
        return
    if not check_admin_subscription(message):
        return
    state = bot_data.user_states.get(message.from_user.id)
    
    if state == 'waiting_multiple_files':
        if message.from_user.id not in bot_data.temp_multi_files:
            bot_data.temp_multi_files[message.from_user.id] = []
            
        files = bot_data.temp_multi_files[message.from_user.id]
        if len(files) >= 10:
            bot.reply_to(message, "‚ùå –®—É–º–æ –∞–ª–ª–∞–∫–∞–π 10 —Ñ–∞–π–ª –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–µ–¥!")
            return
        file_info = {
            'type': message.content_type,
            'file_id': get_file_id(message),
            'caption': message.caption if message.caption else ''
        }
            
        files.append(file_info)
        bot.reply_to(message, f"‚úÖ –§–∞–π–ª {len(files)}/10 –∏–ª–æ–≤–∞ —à—É–¥")
    
    elif state == 'waiting_broadcast_content':
        file_info = {
            'type': message.content_type,
            'file_id': get_file_id(message),
            'caption': message.caption if message.caption else ''
        }
        bot_data.user_states[message.from_user.id] = 'confirm_broadcast'
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω", callback_data="confirm_broadcast"),
            types.InlineKeyboardButton("‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data="cancel_broadcast")
        )
        bot.reply_to(
            message,
            "üì§ –ü–∞—ë–º–∏ —à—É–º–æ –±–∞ “≥–∞–º–∞ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–¥. –¢–∞—Å–¥–∏“õ –º–µ–∫—É–Ω–µ–¥?",
            reply_markup=markup
        )
        # –§–∞–π–ª—Ä–æ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ –º—É–≤–∞“õ“õ–∞—Ç”£ –Ω–∏–≥–æ“≥ –º–µ–¥–æ—Ä–µ–º
        bot_data.temp_broadcast_content = file_info
    
    else:
        file_info = {
            'type': message.content_type,
            'file_id': get_file_id(message),
            'caption': message.caption if message.caption else '',
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
            
        key = str(random.randint(1000, 9999))
        bot_data.files_db[key] = file_info
            
        # –õ–∏–Ω–∫ –≤–∞ “õ—É–ª—Ñ ID —Å–æ—Ö—Ç–∞–Ω
        file_link = f"https://t.me/{bot.get_me().username}?start=file_{key}"
            
        bot.reply_to(
            message,
            f"‚úÖ –§–∞–π–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!\nüîë –†–∞–º–∑: `{key}`\n\nüîó –õ–∏–Ω–∫ –±–∞—Ä–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å”£: `{file_link}`",
            parse_mode='Markdown'
        )

def handle_admin_text(message):
    if not check_admin_subscription(message):
        return
    user_id = message.from_user.id
    text = message.text
    
    if text == "üì§ –ò–ª–æ–≤–∞–∏ –ø–æ—Å—Ç":
        bot.reply_to(message, "üìé –§–∞–π–ª—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (–∞–∫—Å, –≤–∏–¥–µ–æ, —Å–∞–¥–æ, “≥—É“∑“∑–∞—Ç):")
        bot_data.user_states[user_id] = 'waiting_file'
    elif text == "üìÅ –¢–æ–ø 10 —Ñ–∞–π–ª":
        bot.reply_to(message, "üìé –¢–æ 10 —Ñ–∞–π–ª —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:")
        bot_data.temp_multi_files[user_id] = []
        bot_data.user_states[user_id] = 'waiting_multiple_files'
        show_finish_button(message)
    elif text == "‚è± –¢–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç":
        bot.reply_to(message, "‚è± –í–∞“õ—Ç—Ä–æ –±–æ —Å–æ–Ω–∏—è –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (5-120):")
        bot_data.user_states[user_id] = 'waiting_time'
    elif text == "üõ†Ô∏è –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ":
        markup = types.InlineKeyboardMarkup(row_width=1)
        for channel in bot_data.channels:
            markup.add(types.InlineKeyboardButton(f"‚ùå {channel}", callback_data=f"delete_channel_{channel}"))
        markup.add(types.InlineKeyboardButton("‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel"))
        bot.send_message(message.chat.id, "üì¢ –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ:", reply_markup=markup)
    elif text == "‚úèÔ∏è –ú–∞—Ç–Ω–∏ —Å–∞–ª–æ–º":
        bot.reply_to(message, "‚úèÔ∏è –ú–∞—Ç–Ω–∏ –Ω–∞–≤–∏ —Å–∞–ª–æ–º—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        bot_data.user_states[user_id] = 'waiting_welcome_text'
    elif text == "üìä –û–º–æ—Ä":
        stats = (
            f"üìä *–û–º–æ—Ä–∏ –±–æ—Ç:*\n\n"
            f"üë• “≤–∞–º–∞–≥”£ –∫–æ—Ä–±–∞—Ä–æ–Ω: {len(bot_data.statistics['total_users'])}\n"
            f"üì• –ë–æ—Ä–≥–∏—Ä–∏“≥–æ: {bot_data.statistics['total_downloads']}\n"
            f"üìÅ –§–∞–π–ª“≥–æ–∏ —Ñ–∞—ä–æ–ª: {len(bot_data.files_db)}\n"
            f"‚è± –í–∞“õ—Ç–∏ –Ω–µ—Å—Ç—à–∞–≤”£: {bot_data.time_limit} —Å–æ–Ω–∏—è\n"
            f"üì¢ –ö–∞–Ω–∞–ª“≥–æ: {len(bot_data.channels)}"
        )
        bot.reply_to(message, stats, parse_mode='Markdown')
    elif text == "‚ùå –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ “≤–∞", callback_data="clear_confirm"),
            types.InlineKeyboardButton("‚ùå –ù–µ", callback_data="clear_cancel")
        )
        bot.reply_to(message, "‚ö†Ô∏è –û—ë –º–µ—Ö–æ“≥–µ–¥ “≥–∞–º–∞–∏ –º–∞—ä–ª—É–º–æ—Ç—Ä–æ —Ç–æ–∑–∞ –∫—É–Ω–µ–¥?", reply_markup=markup)
    elif text == "üóëÔ∏è –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞–π–ª":
        bot.reply_to(message, "üîë –†–∞–º–∑–∏ —Ñ–∞–π–ª—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        bot_data.user_states[user_id] = 'waiting_delete_key'
    elif text == "üì¢ –ü–∞—ë–º –±–∞ “≥–∞–º–∞":
        bot.reply_to(message, "üì® –ü–∞—ë–º–∏ —Ö—É–¥—Ä–æ –±–∞—Ä–æ–∏ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥ (–º–∞—Ç–Ω, –∞–∫—Å, –≤–∏–¥–µ–æ, “≥—É“∑“∑–∞—Ç —ë –æ–≤–æ–∑):")
        bot_data.user_states[user_id] = 'waiting_broadcast_content'
    elif text == "–ê–Ω“∑–æ–º ‚úÖ" and bot_data.user_states.get(user_id) == 'waiting_multiple_files':
        if user_id in bot_data.temp_multi_files and bot_data.temp_multi_files[user_id]:
            key = str(random.randint(1000, 9999))
            bot_data.multi_files[key] = bot_data.temp_multi_files[user_id]
                
            # –õ–∏–Ω–∫ –≤–∞ “õ—É–ª—Ñ ID —Å–æ—Ö—Ç–∞–Ω
            file_link = f"https://t.me/{bot.get_me().username}?start=file_{key}"
                
            bot.reply_to(
                message,
                f"‚úÖ {len(bot_data.temp_multi_files[user_id])} —Ñ–∞–π–ª –∏–ª–æ–≤–∞ —à—É–¥\nüîë –†–∞–º–∑: `{key}`\n\nüîó –õ–∏–Ω–∫ –±–∞—Ä–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å”£: `{file_link}`",
                parse_mode='Markdown'
            )
            del bot_data.temp_multi_files[user_id]
            bot_data.user_states[user_id] = None
            show_admin_panel(message)
        else:
            bot.reply_to(message, "‚ùå –Ø–≥–æ–Ω —Ñ–∞–π–ª –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç!")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "check_sub":
        if check_subscription(call.from_user.id):
            # –°–∞–Ω“∑–∏–¥–∞–Ω–∏ –∞–≥–∞—Ä –∫–æ—Ä–±–∞—Ä –¥–∞—Ä –∏–Ω—Ç–∏–∑–æ—Ä–∏–∏ —Ñ–∞–π–ª–∏ –ø–∞–π–≤–∞–Ω–¥ –∞—Å—Ç
            if call.from_user.id in bot_data.user_states:
                state = bot_data.user_states[call.from_user.id]
                if state and state.startswith('waiting_sub_for_file_'):
                    file_key = state.replace('waiting_sub_for_file_', '')
                    bot.edit_message_text(
                        "‚úÖ –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –æ–±—É–Ω–∞! –§–∞–π–ª —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥...",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    send_file_with_timer(call.message.chat.id, file_key)
                    bot_data.user_states[call.from_user.id] = None
                    return
                
            bot.edit_message_text(
                "‚úÖ –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –æ–±—É–Ω–∞!\nüîë –ê–∫–Ω—É–Ω —Ä–∞–º–∑–∏ 4-—Ä–∞“õ–∞–º–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(
                call.id,
                "‚ùå –®—É–º–æ “≥–æ–ª–æ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥!",
                show_alert=True
            )
    elif call.data == "add_channel":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–ë–æ—Ç—Ä–æ –¥–∞—Ä –∫–∞–Ω–∞–ª–∏ –¢–µ–ª–µ–≥—Ä–∞–º–∏ —Ö—É–¥ “≥–∞–º—á—É–Ω —è–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—É–∑–æ—Ä–µ–¥ –≤–∞ –Ω–æ–º–∏ –∫–∞–Ω–∞–ª—Ä–æ –±–æ @ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ –±–∞ –º–∏—Å–ª–∏ @–Ω–æ–º–∏_–∫–∞–Ω–∞–ª:")
        bot_data.user_states[call.from_user.id] = 'waiting_channel'
    elif call.data.startswith('delete_channel_'):
        channel = call.data.replace('delete_channel_', '')
        if channel in bot_data.channels:
            bot_data.channels.remove(channel)
            bot_data.save_data()
            bot.answer_callback_query(call.id, f"‚úÖ –ö–∞–Ω–∞–ª–∏ {channel} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!")
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            for channel in bot_data.channels:
                markup.add(types.InlineKeyboardButton(f"‚ùå {channel}", callback_data=f"delete_channel_{channel}"))
            markup.add(types.InlineKeyboardButton("‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel"))
            bot.edit_message_text(
                "üì¢ –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
    elif call.data == "clear_confirm":
        bot_data.files_db.clear()
        bot_data.multi_files.clear()
        bot_data.statistics['total_downloads'] = 0
        bot_data.statistics['active_files'] = 0
        bot_data.save_data()
        bot.answer_callback_query(call.id, "‚úÖ “≤–∞–º–∞–∏ –º–∞—ä–ª—É–º–æ—Ç —Ç–æ–∑–∞ –∫–∞—Ä–¥–∞ —à—É–¥!")
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "clear_cancel":
        bot.answer_callback_query(call.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "confirm_broadcast":
        if hasattr(bot_data, 'temp_broadcast_content'):
            bot.answer_callback_query(call.id, "üì§ –†–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º –æ“ì–æ–∑ —à—É–¥...")
            bot.edit_message_text(
                "üì§ –†–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º –æ“ì–æ–∑ —à—É–¥...",
                call.message.chat.id,
                call.message.message_id
            )
            
            broadcast_thread = threading.Thread(
                target=broadcast_to_all_users,
                args=(bot_data.temp_broadcast_content, call.message.chat.id)
            )
            broadcast_thread.start()
            
            bot_data.user_states[call.from_user.id] = None
            delattr(bot_data, 'temp_broadcast_content')
    elif call.data == "cancel_broadcast":
        bot.answer_callback_query(call.id, "‚ùå –†–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥")
        bot.edit_message_text(
            "‚ùå –†–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥",
            call.message.chat.id,
            call.message.message_id
        )
        bot_data.user_states[call.from_user.id] = None
        if hasattr(bot_data, 'temp_broadcast_content'):
            delattr(bot_data, 'temp_broadcast_content')

def broadcast_to_all_users(file_info, admin_chat_id):
    success_count = 0
    fail_count = 0
    
    for user_id in bot_data.statistics['total_users']:
        if user_id == ADMIN_ID:
            continue
            
        try:
            if file_info['type'] == 'photo':
                bot.send_photo(user_id, file_info['file_id'], caption=file_info['caption'])
            elif file_info['type'] == 'video':
                bot.send_video(user_id, file_info['file_id'], caption=file_info['caption'])
            elif file_info['type'] == 'audio':
                bot.send_audio(user_id, file_info['file_id'], caption=file_info['caption'])
            elif file_info['type'] == 'voice':
                bot.send_voice(user_id, file_info['file_id'], caption=file_info['caption'])
            elif file_info['type'] == 'document':
                bot.send_document(user_id, file_info['file_id'], caption=file_info['caption'])
                
            success_count += 1
            time.sleep(0.1)  # –ë–∞—Ä–æ–∏ –ø–µ—à–≥–∏—Ä–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∑ “∑–æ–Ω–∏–±–∏ –¢–µ–ª–µ–≥—Ä–∞–º
        except:
            fail_count += 1
    
    bot.send_message(
        admin_chat_id,
        f"üìä –ù–∞—Ç–∏“∑–∞–∏ —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º:\n\n"
        f"‚úÖ –ë–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç: {success_count}\n"
        f"‚ùå –ù–æ–∫–æ–º: {fail_count}"
    )

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    text = message.text
    if user_id == ADMIN_ID:
        state = bot_data.user_states.get(user_id)
            
        if state == 'waiting_time':
            bot_data.time_limit = int(text)
                bot_data.save_data()
                bot.reply_to(message, f"‚úÖ –í–∞“õ—Ç–∏ –Ω–µ—Å—Ç—à–∞–≤”£ –±–∞ {text} —Å–æ–Ω–∏—è —Ç–∞–Ω–∑–∏–º –∫–∞—Ä–¥–∞ —à—É–¥")
                bot_data.user_states[user_id] = None
          else:
                bot.reply_to(message, "‚ùå –í–∞“õ—Ç –±–æ—è–¥ –∞–∑ 5 —Ç–æ 120 —Å–æ–Ω–∏—è –±–æ—à–∞–¥!")
        elif state == 'waiting_channel':
            if text.startswith('@'):
                try:
                    bot_chat = bot.get_chat(text)
                    member = bot.get_chat_member(text, bot.get_me().id)
                    if member.status in ['administrator', 'creator']:
                        if text not in bot_data.channels:
                            bot_data.channels.append(text)
                            bot_data.save_data()
                            bot.reply_to(message, f"‚úÖ –ö–∞–Ω–∞–ª–∏ {text} –∏–ª–æ–≤–∞ —à—É–¥!")
                        else:
                            bot.reply_to(message, "‚ùå –ò–Ω –∫–∞–Ω–∞–ª –∞–ª–ª–∞–∫–∞–π –∏–ª–æ–≤–∞ —à—É–¥–∞–∞—Å—Ç!")
                    else:
                        bot.reply_to(message, "‚ùå –ë–æ—Ç –±–æ—è–¥ –¥–∞—Ä –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—à–∞–¥!")
                except Exception as e:
                    bot.reply_to(message, f"‚ùå –•–∞—Ç–æ–≥”£: {str(e)}\n–ë–æ–≤–∞—Ä”£ “≥–æ—Å–∏–ª –∫—É–Ω–µ–¥, –∫–∏ –±–æ—Ç –¥–∞—Ä –∫–∞–Ω–∞–ª –∞—Å—Ç –≤–∞ –¥–∞—Å—Ç—Ä–∞—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ—Ä–∞–¥!")
            else:
                bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç! –ù–æ–º–∏ –∫–∞–Ω–∞–ª –±–æ—è–¥ –±–æ @ —Å–∞—Ä —à–∞–≤–∞–¥!")
        elif state == 'waiting_welcome_text':
            bot_data.welcome_text = text
            bot_data.save_data()
            bot.reply_to(message, "‚úÖ –ú–∞—Ç–Ω–∏ —Å–∞–ª–æ–º –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥!")
            bot_data.user_states[user_id] = None
        elif state == 'waiting_delete_key':
            if text in bot_data.files_db:
                del bot_data.files_db[text]
                bot.reply_to(message, f"‚úÖ –§–∞–π–ª –±–æ —Ä–∞–º–∑–∏ {text} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!")
            elif text in bot_data.multi_files:
                del bot_data.multi_files[text]
                bot.reply_to(message, f"‚úÖ –§–∞–π–ª“≥–æ –±–æ —Ä–∞–º–∑–∏ {text} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥–∞–Ω–¥!")
            else:
                bot.reply_to(message, "‚ùå –§–∞–π–ª –±–æ —á—É–Ω–∏–Ω —Ä–∞–º–∑ —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            bot_data.user_states[user_id] = None
        else:
            handle_admin_text(message)
    else:
        # –ö–æ–¥–∏ –±–∞—Ä–æ–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω
        if text.isdigit() and len(text) == 4:
            if not check_subscription(user_id):
                show_channels_keyboard(message.chat.id)
                return
                
            key = text
            if key in bot_data.files_db or key in bot_data.multi_files:
                send_file_with_timer(message.chat.id, key)
            else:
                bot.reply_to(message, "‚ùå –§–∞–π–ª –±–æ —á—É–Ω–∏–Ω —Ä–∞–º–∑ —ë—Ñ—Ç –Ω–∞—à—É–¥ —ë –∞–ª–ª–∞–∫–∞–π –Ω–µ—Å—Ç —à—É–¥–∞–∞—Å—Ç!")
        else:
@app.route(f"/{BOT_TOKEN}", methods=['POST']) def telegram_webhook(): update = telebot.types.Update.de_json(request.stream.read().decode("utf-8")) bot.process_new_updates([update]) return "ok", 200

@app.route('/') def home(): return "Bot is running!"

Webhook-—Ä–æ —Å–∞–±—Ç –º–µ–∫—É–Ω–µ–º

bot.remove_webhook() bot.set_webhook(url=f"https://films-bot-9fxf.onrender.com/{BOT_TOKEN}")

if name == "main": app.run(host="0.0.0.0", port=10010)
