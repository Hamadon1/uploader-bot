from flask import Flask, request
import telebot
import json
import random
import threading
import time

TOKEN = '7947429084:AAECl4VTgRdgv53IAixvZ5qgDMvABI8_d0o'
ADMIN_ID = 6862331593  # Telegram ID-–∏ –∞–¥–º–∏–Ω–∏ –∞—Å–ª”£

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ë–∞–∑–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
try:
    with open("data.json", "r") as f:
        db = json.load(f)
except:
    db = {"movies": {}, "channels": [], "admins": [ADMIN_ID], "collections": {}, "delete_time": 30}

if "admins" not in db:
    db["admins"] = [ADMIN_ID]

if "collections" not in db:
    db["collections"] = {}

if "delete_time" not in db:
    db["delete_time"] = 30  # –í–∞“õ—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç”£ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º“≥–æ (30 —Å–æ–Ω–∏—è)

def save_db():
    with open("data.json", "w") as f:
        json.dump(db, f)

def is_subscribed(user_id):
    for channel in db["channels"]:
        try:
            status = bot.get_chat_member(channel, user_id).status
            if status in ['member', 'administrator', 'creator']:
                continue
            else:
                return False
        except:
            return False
    return True

def is_admin(user_id):
    return user_id in db["admins"]

user_states = {}
movie_info_temp = {}
collection_temp = {}

# –†–æ—É—Ç –±–∞—Ä–æ–∏ webhook
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return "Bot is running!", 200

# –•–∞–Ω–¥–ª–µ—Ä“≥–æ
@bot.message_handler(commands=["start"])
def start(msg):
    if is_subscribed(msg.chat.id):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîç “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º", "üì∫ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
        markup.add("‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ")
        
        if is_admin(msg.from_user.id):
            markup.add("üë®‚Äçüíª –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")
            
        bot.send_message(msg.chat.id, "–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –±–æ—Ç–∏ —Ñ–∏–ª–º“≥–æ!", reply_markup=markup)
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        for ch in db["channels"]:
            markup.add(telebot.types.InlineKeyboardButton("–û–±—É–Ω–∞ —à—É–¥–∞–Ω", url=f"https://t.me/{ch.replace('@', '')}"))
        markup.add(telebot.types.InlineKeyboardButton("–°–∞–Ω“∑–∏—à", callback_data="check_sub"))
        bot.send_message(msg.chat.id, "–ê–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üîç “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
def search_movie_handler(msg):
    if is_subscribed(msg.chat.id):
        user_states[msg.chat.id] = "waiting_for_movie_id"
        bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω ID —Ñ–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:")
    else:
        start(msg)

@bot.message_handler(func=lambda msg: msg.text == "üì∫ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
def new_movies(msg):
    if is_subscribed(msg.chat.id):
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ 5 —Ñ–∏–ª–º–∏ –æ—Ö–∏—Ä–∏–Ω
        movie_ids = list(db["movies"].keys())
        if movie_ids:
            response = "–§–∏–ª–º“≥–æ–∏ –Ω–∞–≤:\n\n"
            # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ç–æ 5 —Ñ–∏–ª–º–∏ –æ—Ö–∏—Ä–∏–Ω
            for movie_id in movie_ids[-5:]:
                info = db["movies"][movie_id].get("info", "")
                response += f"üé¨ ID: {movie_id}\n{info}\n\n"
            bot.send_message(msg.chat.id, response)
        else:
            bot.send_message(msg.chat.id, "“≤–æ–ª–æ —è–≥–æ–Ω —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
    else:
        start(msg)

@bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ")
def about_us(msg):
    if is_subscribed(msg.chat.id):
        bot.send_message(msg.chat.id, "–ò–Ω –±–æ—Ç –±–∞—Ä–æ–∏ —Ç–∞–º–æ—à–æ–∏ —Ñ–∏–ª–º“≥–æ –±–æ —Å–∏—Ñ–∞—Ç–∏ –±–∞–ª–∞–Ω–¥ —Ç–∞–π—ë—Ä —à—É–¥–∞–∞—Å—Ç.\n\n–ë–∞—Ä–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ —Ñ–∏–ª–º“≥–æ, ID-–∏ —Ñ–∏–ª–º—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
    else:
        start(msg)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    if is_subscribed(call.message.chat.id):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîç “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º", "üì∫ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
        markup.add("‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ")
        
        if is_admin(call.message.chat.id):
            markup.add("üë®‚Äçüíª –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")
            
        bot.send_message(call.message.chat.id, "–û—Ñ–∞—Ä–∏–Ω! –®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–æ—Ç—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥.")

@bot.message_handler(func=lambda msg: msg.text == "üë®‚Äçüíª –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω" and is_admin(msg.from_user.id))
def panel(msg):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –ò–ª–æ–≤–∞–∏ –§–∏–ª–º", "‚ûï –ò–ª–æ–≤–∞–∏ –ö–∞–Ω–∞–ª")
    markup.add("‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∏–ª–º", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ö–∞–Ω–∞–ª")
    markup.add("üìö –ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ")
    markup.add("üë®‚Äçüíº –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω“≥–æ")
    markup.add("‚è± –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –≤–∞“õ—Ç")
    markup.add("üîô –ë–æ–∑–≥–∞—à—Ç")
    bot.send_message(msg.chat.id, "–ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üë®‚Äçüíº –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω“≥–æ" and is_admin(msg.from_user.id))
def admin_management(msg):
    if msg.from_user.id == ADMIN_ID:  # –§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–∏ –∞—Å–ª”£ –º–µ—Ç–∞–≤–æ–Ω–∞–¥ –∞–¥–º–∏–Ω“≥–æ—Ä–æ –∏–¥–æ—Ä–∞ –∫—É–Ω–∞–¥
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –ò–ª–æ–≤–∞–∏ –∞–¥–º–∏–Ω", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω")
        markup.add("üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª")
        bot.send_message(msg.chat.id, "–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω“≥–æ:", reply_markup=markup)
    else:
        bot.send_message(msg.chat.id, "–®—É–º–æ –∏“∑–æ–∑–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –∞–¥–º–∏–Ω" and msg.from_user.id == ADMIN_ID)
def add_admin(msg):
    user_states[msg.chat.id] = "waiting_for_admin_id"
    bot.send_message(msg.chat.id, "ID-–∏ –∞–¥–º–∏–Ω–∏ –Ω–∞–≤—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω" and msg.from_user.id == ADMIN_ID)
def delete_admin(msg):
    if len(db["admins"]) > 1:
        user_states[msg.chat.id] = "waiting_for_delete_admin"
        admins = "\n".join([f"{i+1}. {admin_id}" for i, admin_id in enumerate(db["admins"]) if admin_id != ADMIN_ID])
        bot.send_message(msg.chat.id, f"–†–∞“õ–∞–º–∏ –∞–¥–º–∏–Ω—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:\n{admins}")
    else:
        bot.send_message(msg.chat.id, "–î–∞—Ä —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–Ω“≥–æ —è–∫ –∞–¥–º–∏–Ω –º–∞–≤“∑—É–¥ –∞—Å—Ç.")

@bot.message_handler(func=lambda msg: msg.text == "üìö –ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ" and is_admin(msg.from_user.id))
def collection_menu(msg):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –°–æ—Ö—Ç–∞–Ω–∏ –º–∞“∑–º”Ø–∞", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“∑–º”Ø–∞")
    markup.add("üìã –†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ")
    markup.add("üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª")
    bot.send_message(msg.chat.id, "–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –º–∞“∑–º”Ø–∞“≥–æ–∏ —Ñ–∏–ª–º:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –°–æ—Ö—Ç–∞–Ω–∏ –º–∞“∑–º”Ø–∞" and is_admin(msg.from_user.id))
def create_collection(msg):
    collection_temp[msg.chat.id] = {"movies": []}
    user_states[msg.chat.id] = "waiting_for_collection_movie"
    bot.send_message(msg.chat.id, "–§–∏–ª–º–∏ —è–∫—É–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (—Ç–æ 10 —Ñ–∏–ª–º –º–µ—Ç–∞–≤–æ–Ω–µ–¥). –ë–∞—Ä–æ–∏ –∞–Ω“∑–æ–º [–∞–Ω“∑–æ–º] –ø–∞—Ö—à –∫—É–Ω–µ–¥:")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“∑–º”Ø–∞" and is_admin(msg.from_user.id))
def delete_collection(msg):
    if db["collections"]:
        user_states[msg.chat.id] = "waiting_for_delete_collection"
        collections = "\n".join([f"{i+1}. ID: {coll_id}, –®—É–º–æ—Ä–∞–∏ —Ñ–∏–ª–º“≥–æ: {len(info['movies'])}" 
                               for i, (coll_id, info) in enumerate(db["collections"].items())])
        bot.send_message(msg.chat.id, f"–†–∞“õ–∞–º–∏ –º–∞“∑–º”Ø–∞—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:\n{collections}")
    else:
        bot.send_message(msg.chat.id, "–Ø–≥–æ–Ω –º–∞“∑–º”Ø–∞ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.")

@bot.message_handler(func=lambda msg: msg.text == "üìã –†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ" and is_admin(msg.from_user.id))
def list_collections(msg):
    if db["collections"]:
        collections = "\n\n".join([f"üé¨ ID: {coll_id}\n–®—É–º–æ—Ä–∞–∏ —Ñ–∏–ª–º“≥–æ: {len(info['movies'])}" 
                                 for coll_id, info in db["collections"].items()])
        bot.send_message(msg.chat.id, f"–†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ:\n\n{collections}")
    else:
        bot.send_message(msg.chat.id, "–Ø–≥–æ–Ω –º–∞“∑–º”Ø–∞ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_collection_movie")
def add_movie_to_collection(msg):
    if msg.text == "–∞–Ω“∑–æ–º" or msg.text == "[–∞–Ω“∑–æ–º]":
        if collection_temp[msg.chat.id]["movies"]:
            collection_id = str(random.randint(1000, 9999))
            while collection_id in db["collections"]:
                collection_id = str(random.randint(1000, 9999))
                
            db["collections"][collection_id] = collection_temp[msg.chat.id]
            save_db()
            bot.send_message(msg.chat.id, f"–ú–∞“∑–º”Ø–∞ —Å–æ—Ö—Ç–∞ —à—É–¥. ID –º–∞“∑–º”Ø–∞: {collection_id}")
            del collection_temp[msg.chat.id]
            user_states.pop(msg.chat.id)
        else:
            bot.send_message(msg.chat.id, "–®—É–º–æ –±–æ—è–¥ “≥–∞–¥–¥–∏ –∞“õ–∞–ª —è–∫ —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥.")
    elif msg.content_type == 'video':
        if len(collection_temp[msg.chat.id]["movies"]) >= 10:
            bot.send_message(msg.chat.id, "–®—É–º–æ –∞–ª–ª–∞–∫–∞–π 10 —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–µ–¥. –ë–∞—Ä–æ–∏ –∞–Ω“∑–æ–º [–∞–Ω“∑–æ–º] –ø–∞—Ö—à –∫—É–Ω–µ–¥.")
        else:
            movie_data = {"file_id": msg.video.file_id}
            collection_temp[msg.chat.id]["movies"].append(movie_data)
            movie_count = len(collection_temp[msg.chat.id]["movies"])
            bot.send_message(msg.chat.id, f"–§–∏–ª–º–∏ {movie_count} –∏–ª–æ–≤–∞ —à—É–¥. –§–∏–ª–º–∏ –Ω–∞–≤–±–∞—Ç–∏—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë [–∞–Ω“∑–æ–º] –ø–∞—Ö—à –∫—É–Ω–µ–¥:")
    else:
        bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ñ–∏–ª–º —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë [–∞–Ω“∑–æ–º] –ø–∞—Ö—à –∫—É–Ω–µ–¥.")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_admin_id")
def process_add_admin(msg):
    try:
        admin_id = int(msg.text)
        if admin_id not in db["admins"]:
            db["admins"].append(admin_id)
            save_db()
            bot.send_message(msg.chat.id, f"–ê–¥–º–∏–Ω –±–æ ID {admin_id} –∏–ª–æ–≤–∞ —à—É–¥.")
        else:
            bot.send_message(msg.chat.id, "–ò–Ω ID –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç–∏ –∞–¥–º–∏–Ω“≥–æ –º–∞–≤“∑—É–¥ –∞—Å—Ç.")
    except ValueError:
        bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
    user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_admin")
def process_delete_admin(msg):
    try:
        index = int(msg.text) - 1
        admin_ids = [admin_id for admin_id in db["admins"] if admin_id != ADMIN_ID]
        if 0 <= index < len(admin_ids):
            admin_to_delete = admin_ids[index]
            db["admins"].remove(admin_to_delete)
            save_db()
            bot.send_message(msg.chat.id, f"–ê–¥–º–∏–Ω –±–æ ID {admin_to_delete} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.")
        else:
            bot.send_message(msg.chat.id, "–†–∞“õ–∞–º –Ω–æ–¥—É—Ä—É—Å—Ç.")
    except ValueError:
        bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
    user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_collection")
def process_delete_collection(msg):
    try:
        index = int(msg.text) - 1
        collections = list(db["collections"].keys())
        if 0 <= index < len(collections):
            collection_id = collections[index]
            del db["collections"][collection_id]
            save_db()
            bot.send_message(msg.chat.id, f"–ú–∞“∑–º”Ø–∞ –±–æ ID {collection_id} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.")
        else:
            bot.send_message(msg.chat.id, "–†–∞“õ–∞–º –Ω–æ–¥—É—Ä—É—Å—Ç.")
    except ValueError:
        bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
    user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –§–∏–ª–º" and is_admin(msg.from_user.id))
def add_movie(msg):
    user_states[msg.chat.id] = "waiting_for_movie"
    bot.send_message(msg.chat.id, "–§–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –ö–∞–Ω–∞–ª" and is_admin(msg.from_user.id))
def add_channel(msg):
    user_states[msg.chat.id] = "waiting_for_channel"
    bot.send_message(msg.chat.id, "–ù–æ–º–∏ –∫–∞–Ω–∞–ª—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (–º–∏—Å–æ–ª: @kanal):")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∏–ª–º" and is_admin(msg.from_user.id))
def delete_movie(msg):
    user_states[msg.chat.id] = "waiting_for_delete_movie"
    bot.send_message(msg.chat.id, "ID-–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω:")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ö–∞–Ω–∞–ª" and is_admin(msg.from_user.id))
def delete_channel(msg):
    if db["channels"]:
        user_states[msg.chat.id] = "waiting_for_delete_channel"
        chs = "\n".join([f"{i+1}. {ch}" for i, ch in enumerate(db["channels"])])
        bot.send_message(msg.chat.id, f"–ò–Ω —Ä–∞“õ–∞–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:\n{chs}")
    else:
        bot.send_message(msg.chat.id, "–ö–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à—É–¥.")

@bot.message_handler(func=lambda msg: msg.text == "üîô –ë–æ–∑–≥–∞—à—Ç" and is_admin(msg.from_user.id))
def back_to_main(msg):
    start(msg)

@bot.message_handler(func=lambda msg: msg.text == "üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª" and is_admin(msg.from_user.id))
def back_to_panel(msg):
    panel(msg)

@bot.message_handler(content_types=["video"])
def save_movie(msg):
    if user_states.get(msg.chat.id) == "waiting_for_movie" and is_admin(msg.from_user.id):
        movie_id = str(random.randint(1000, 9999))
        while movie_id in db["movies"]:
            movie_id = str(random.randint(1000, 9999))
            
        movie_info_temp[msg.chat.id] = {"id": movie_id, "file_id": msg.video.file_id}
        user_states[msg.chat.id] = "waiting_for_movie_info"
        bot.send_message(msg.chat.id, "–ú–∞—ä–ª—É–º–æ—Ç–∏ —Ñ–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë /skip –Ω–∞–≤–∏—Å–µ–¥:")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_movie_info")
def add_movie_info(msg):
    movie_info = "" if msg.text == "/skip" else msg.text
    movie_id = movie_info_temp[msg.chat.id]["id"]
    file_id = movie_info_temp[msg.chat.id]["file_id"]

    db["movies"][movie_id] = {"file_id": file_id, "info": movie_info}
    save_db()
    bot.send_message(msg.chat.id, f"–°–∞–±—Ç —à—É–¥. “ö—É–ª—Ñ ID: {movie_id}")
    user_states.pop(msg.chat.id)
    movie_info_temp.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_channel")
def save_channel(msg):
    if is_admin(msg.from_user.id):
        db["channels"].append(msg.text)
        save_db()
        bot.send_message(msg.chat.id, f"–ö–∞–Ω–∞–ª {msg.text} —Å–∞–±—Ç —à—É–¥.")
        user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_movie")
def process_delete_movie(msg):
    if is_admin(msg.from_user.id):
        movie_id = msg.text
        if movie_id in db["movies"]:
            db["movies"].pop(movie_id)
            save_db()
            bot.send_message(msg.chat.id, "–§–∏–ª–º –Ω–µ—Å—Ç —à—É–¥.")
        else:
            bot.send_message(msg.chat.id, "–§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_channel")
def process_delete_channel(msg):
    if is_admin(msg.from_user.id):
        try:
            index = int(msg.text) - 1
            if 0 <= index < len(db["channels"]):
                ch = db["channels"].pop(index)
                save_db()
                bot.send_message(msg.chat.id, f"{ch} –Ω–µ—Å—Ç —à—É–¥.")
            else:
                bot.send_message(msg.chat.id, "–†–∞“õ–∞–º –Ω–æ–¥—É—Ä—É—Å—Ç.")
        except:
            bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –Ω–∞–≤–∏—Å–µ–¥.")
        user_states.pop(msg.chat.id)

def schedule_delete_message(chat_id, message_id, delete_time):
    """–§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∏ –ø–∞—ë–º“≥–æ –¥–∞—Ä –≤–∞“õ—Ç–∏ –º—É–∞–π—è–Ω"""
    def delete_message():
        try:
            time.sleep(delete_time)
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            print(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º: {e}")
    
    thread = threading.Thread(target=delete_message)
    thread.daemon = True
    thread.start()

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_movie_id")
def process_search_movie(msg):
    movie_id = msg.text
    if is_subscribed(msg.chat.id):
        delete_time = db.get("delete_time", 30)  # –í–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç”£ 30 —Å–æ–Ω–∏—è)
        
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ –º–∞“∑–º”Ø–∞
        if movie_id in db["collections"]:
            warning_msg = bot.send_message(msg.chat.id, f"‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –§–∏–ª–º“≥–æ –±–∞—ä–¥ –∞–∑ {delete_time} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–Ω–¥. –ê–≥–∞—Ä –ª–æ–∑–∏–º –±–æ—à–∞–¥, –Ω—É—Å—Ö–∞–∏ –æ–Ω“≥–æ—Ä–æ –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥.")
            
            sent_messages = []
            for movie in db["collections"][movie_id]["movies"]:
                sent = bot.send_video(msg.chat.id, movie["file_id"])
                sent_messages.append(sent.message_id)
            
            info_msg = bot.send_message(msg.chat.id, f"–ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ –±–æ ID {movie_id} —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞ —à—É–¥.")
            sent_messages.append(info_msg.message_id)
            sent_messages.append(warning_msg.message_id)
            
            # –ë–∞–Ω–∞“õ—à–∞–≥–∏—Ä–∏–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–º–∞–∏ –ø–∞—ë–º“≥–æ
            for message_id in sent_messages:
                schedule_delete_message(msg.chat.id, message_id, delete_time)
                
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ —è–∫ —Ñ–∏–ª–º
        elif movie_id in db["movies"]:
            warning_msg = bot.send_message(msg.chat.id, f"‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –§–∏–ª–º –±–∞—ä–¥ –∞–∑ {delete_time} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–¥. –ê–≥–∞—Ä –ª–æ–∑–∏–º –±–æ—à–∞–¥, –Ω—É—Å—Ö–∞–∏ –æ–Ω—Ä–æ –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥.")
            
            data = db["movies"][movie_id]
            video_msg = bot.send_video(msg.chat.id, data["file_id"])
            
            sent_messages = [video_msg.message_id, warning_msg.message_id]
            
            if data["info"]:
                info_msg = bot.send_message(msg.chat.id, data["info"])
                sent_messages.append(info_msg.message_id)
            
            # –ë–∞–Ω–∞“õ—à–∞–≥–∏—Ä–∏–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–º–∞–∏ –ø–∞—ë–º“≥–æ
            for message_id in sent_messages:
                schedule_delete_message(msg.chat.id, message_id, delete_time)
        else:
            bot.send_message(msg.chat.id, "–§–∏–ª–º —ë –º–∞“∑–º”Ø–∞ –±–æ —á—É–Ω–∏–Ω ID —ë—Ñ—Ç –Ω–∞—à—É–¥.")
    else:
        start(msg)
    user_states.pop(msg.chat.id, None)

@bot.message_handler(func=lambda msg: msg.text.isdigit() and len(msg.text) == 4)
def send_movie(msg):
    movie_id = msg.text
    if is_subscribed(msg.chat.id):
        delete_time = db.get("delete_time", 30)  # –í–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç”£ 30 —Å–æ–Ω–∏—è)
        
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ –º–∞“∑–º”Ø–∞
        if movie_id in db["collections"]:
            warning_msg = bot.send_message(msg.chat.id, f"‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –§–∏–ª–º“≥–æ –±–∞—ä–¥ –∞–∑ {delete_time} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–Ω–¥. –ê–≥–∞—Ä –ª–æ–∑–∏–º –±–æ—à–∞–¥, –Ω—É—Å—Ö–∞–∏ –æ–Ω“≥–æ—Ä–æ –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥.")
            
            sent_messages = []
            for movie in db["collections"][movie_id]["movies"]:
                sent = bot.send_video(msg.chat.id, movie["file_id"])
                sent_messages.append(sent.message_id)
            
            info_msg = bot.send_message(msg.chat.id, f"–ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ –±–æ ID {movie_id} —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞ —à—É–¥.")
            sent_messages.append(info_msg.message_id)
            sent_messages.append(warning_msg.message_id)
            
            # –ë–∞–Ω–∞“õ—à–∞–≥–∏—Ä–∏–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–º–∞–∏ –ø–∞—ë–º“≥–æ
            for message_id in sent_messages:
                schedule_delete_message(msg.chat.id, message_id, delete_time)
                
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ —è–∫ —Ñ–∏–ª–º
        elif movie_id in db["movies"]:
            warning_msg = bot.send_message(msg.chat.id, f"‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –§–∏–ª–º –±–∞—ä–¥ –∞–∑ {delete_time} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–¥. –ê–≥–∞—Ä –ª–æ–∑–∏–º –±–æ—à–∞–¥, –Ω—É—Å—Ö–∞–∏ –æ–Ω—Ä–æ –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥.")
            
            data = db["movies"][movie_id]
            video_msg = bot.send_video(msg.chat.id, data["file_id"])
            
            sent_messages = [video_msg.message_id, warning_msg.message_id]
            
            if data["info"]:
                info_msg = bot.send_message(msg.chat.id, data["info"])
                sent_messages.append(info_msg.message_id)
            
            # –ë–∞–Ω–∞“õ—à–∞–≥–∏—Ä–∏–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–º–∞–∏ –ø–∞—ë–º“≥–æ
            for message_id in sent_messages:
                schedule_delete_message(msg.chat.id, message_id, delete_time)
        else:
            bot.send_message(msg.chat.id, "–§–∏–ª–º —ë –º–∞“∑–º”Ø–∞ –±–æ —á—É–Ω–∏–Ω ID —ë—Ñ—Ç –Ω–∞—à—É–¥.")
    else:
       start(msg)

# –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –≤–∞“õ—Ç
@bot.message_handler(func=lambda msg: msg.text == "‚è± –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –≤–∞“õ—Ç" and is_admin(msg.from_user.id))
def set_delete_time(msg):
    user_states[msg.chat.id] = "waiting_for_delete_time"
    bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω –≤–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º“≥–æ—Ä–æ –±–æ —Å–æ–Ω–∏—è –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–∞–∑ 5 —Ç–æ 120 —Å–æ–Ω–∏—è):")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_time")
def process_delete_time(msg):
    if is_admin(msg.from_user.id):
        try:
            delete_time = int(msg.text)
            if 5 <= delete_time <= 120:
                db["delete_time"] = delete_time
                save_db()
                bot.send_message(msg.chat.id, f"–í–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∏ —Ñ–∏–ª–º“≥–æ –±–∞ {delete_time} —Å–æ–Ω–∏—è —Ç–∞–Ω–∑–∏–º —à—É–¥.")
            else:
                bot.send_message(msg.chat.id, "–í–∞“õ—Ç –±–æ—è–¥ –∞–∑ 5 —Ç–æ 120 —Å–æ–Ω–∏—è –±–æ—à–∞–¥. –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.")
        except ValueError:
            bot.send_message(msg.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
        user_states.pop(msg.chat.id)

# Webhook-—Ä–æ –Ω–∞—Å–± –º–µ–∫—É–Ω–µ–º
bot.remove_webhook()
bot.set_webhook(url=f"https://films-bot-9fxf.onrender.com/7947429084:AAECl4VTgRdgv53IAixvZ5qgDMvABI8_d0o")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=11000)
